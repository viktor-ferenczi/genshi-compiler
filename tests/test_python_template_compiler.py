""" Unit test cases for the XML template compiler generating Python code

(C) 2011 - Viktor Ferenczi <viktor@ferenczi.eu>
    
License: MIT

"""

# Add the extracted distribution folder to the Python module search path
# to allow testing it before installation
import os, sys
if os.path.isdir('../genshi_compiler'):
    sys.path.append('..')

import unittest

import genshi_compiler
from genshi_compiler import util, html_minimizer, python_xml_template_compiler

import data


class PythonXMLTemplateCompilerTestCase(unittest.TestCase):
    """ Unit test cases for the Genshi XML template compiler
    """

    def compile_template(self, basename, arguments=''):
        
        """ Compiles a single test template to a module, then import it
        the first time.
        
        basename: Name of the template file without extension, it is also the module name
        arguments: The arguments of the template like in a Python function definition
        
        Returns the imported module.
        
        """
        # Load the template
        template_filename = 'data/%s.html' % basename
        with open(template_filename, 'rt') as template_file:
            template_xml = template_file.read()
        assert template_xml.decode('utf8')
        
        # Compile it to module source
        compiler = python_xml_template_compiler.PythonXMLTemplateCompiler()
        compiler.load(template_xml, template_filename=template_filename) 
        module_source = compiler.compile(arguments)
        assert isinstance(module_source, str)
        assert module_source.decode('ascii')
        
        # Save it as a Python module file
        with open('data/%s.py' % basename, 'wt') as module_file:
            module_file.write(module_source)
            
        # Import the module
        subpackage = __import__('data.%s' % basename, globals(), locals())
        module = getattr(subpackage, basename)
        
        return module
    
    def compare_with_expected_output(self, output, basename):
        """ Compiles a single test template to a module, import it, then
        executes the template with the test parameters given checking for
        the expected output
        
        output: The output of the compiled template
        basename: Name of the template file without extension, it is also the module name
        
        """
        # Verify the results
        with open('data/%s.expected-output.html' % basename, 'rt') as expected_output_file:
            expected_output = expected_output_file.read()
        if output != expected_output:
            util.print_diff(expected_output, output, 'Expected output', 'Output of the compiled template')
        self.assertEquals(expected_output, output)
        
    def compare_with_genshi(self, output, basename, arguments, template_parameters={}):
        """ Compares the output of a single compiled template with the output
        generated by Genshi itself

        output: The output of the compiled template
        basename: Name of the template file without extension, it is also the module name
        arguments: The arguments of the template like in a Python function definition
        template_parameters: Keyword parameters to pass to the template
        
        """
        # Render the same template using Genshi
        try:
            import genshi
        except ImportError:
            print 'Genshi is not installed, testing against Genshi skipped.'
            return
        
        import genshi.template
        with open('data/%s.html' % basename, 'rt') as template_file:
            source = template_file.read()
        assert source.decode('utf8')
        genshi_template = genshi.template.MarkupTemplate(
            source,
            filepath='data/%s.html' % basename,
            filename='%s.html' % basename)
        kws = eval('dict(%s)' % arguments)
        kws.update(template_parameters)
        token_stream = genshi_template.generate(**kws)
        genshi_output = token_stream.render(method='xml', encoding=None)
        assert isinstance(genshi_output, unicode)

        # Normalize output to make them comparable
        minimized_output = util.remove_duplicate_whitespace(html_minimizer.minimize(output))
        minimized_genshi_output = util.remove_duplicate_whitespace(html_minimizer.minimize(genshi_output))
        
        # Removing all the whitespace between and around elements
        minimized_output = minimized_output.replace('>\n', '>', ).replace('> ', '>').replace('\n<', '<', ).replace(' <', '<')
        minimized_genshi_output = minimized_genshi_output.replace('>\n', '>', ).replace('> ', '>').replace('\n<', '<', ).replace(' <', '<')
        
        # Add back newlines after each tag to allow printing unified difference
        minimized_output = minimized_output.replace('>', '>\n', )
        minimized_genshi_output = minimized_genshi_output.replace('>', '>\n', )
        
        # Write to file
        with open('data/%s.output.html' % basename, 'wt') as output_file:
            output_file.write(output.encode('utf-8'))
        with open('data/%s.minimized-output.html' % basename, 'wt') as output_file:
            output_file.write(minimized_output.encode('utf-8'))
        with open('data/%s.genshi-output.html' % basename, 'wt') as output_file:
            output_file.write(genshi_output.encode('utf-8'))
        with open('data/%s.minimized-genshi-output.html' % basename, 'wt') as output_file:
            output_file.write(minimized_genshi_output.encode('utf-8'))
            
        # Compare the results
        if minimized_output != minimized_genshi_output:
            util.print_diff(minimized_genshi_output, minimized_output, 'Genshi output', 'Output of the compiled template')
        self.assertEquals(minimized_genshi_output, minimized_output)
        
    def do_test(self, basename, arguments, template_parameters={}):
        """ Processes all the tests for a single test template
        """
        # Compile the template to a module
        module = self.compile_template(basename, arguments)
        
        # Invoke the compiled template with the test parameters
        output = module.render(**template_parameters)
        assert isinstance(output, unicode)
        
        # Compare the results
        self.compare_with_expected_output(output, basename)
        self.compare_with_genshi(output, basename, arguments, template_parameters)
        
    def test_compiling_single_template(self):
        self.do_test('directives', "count=10, text='default text', type=int, object=(1, 2, 3), empty=None")

if __name__ == '__main__':
    unittest.main()
